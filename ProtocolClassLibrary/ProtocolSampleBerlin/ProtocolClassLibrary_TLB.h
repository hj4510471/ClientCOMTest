// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 87174 $
// File generated on 2021-09-14 오후 5:12:45 from Type Library described below.

// ************************************************************************  //
// Type Lib: D:\Dev_github\jbkim\ProtocolLib\ProtocolClassLibrary\ProtocolClassLibrary\bin\Debug\ProtocolClassLibrary.tlb (1)
// LIBID: {C8B6526C-8E70-4FF5-970E-9201B6FACE35}
// LCID: 0
// Helpfile: 
// HelpString: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
//   (2) v2.4 mscorlib, (C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
#ifndef   ProtocolClassLibrary_TLBH
#define   ProtocolClassLibrary_TLBH

#pragma option push -b -a4 -w-inl -w-8118

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif
#include "mscorlib_TLB.h"

#include <System.Win.StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace Protocolclasslibrary_tlb
{

// *********************************************************************//
// HelpString: 
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_ProtocolClassLibrary;
extern __declspec (package) const GUID GUID_ProtocolKind;
extern __declspec (package) const GUID IID_IProtocolLib;
extern __declspec (package) const GUID IID__ProtocolLib;
extern __declspec (package) const GUID CLSID_ProtocolLib;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum class    ProtocolKind;
interface DECLSPEC_UUID("{9AE22444-7188-45D0-B1F2-C05F4AEA80FC}") IProtocolLib;
typedef TComInterface<IProtocolLib, &IID_IProtocolLib> IProtocolLibPtr;

interface DECLSPEC_UUID("{B01D07AE-4CF9-35C9-B772-E46F994EB6AE}") _ProtocolLib;
typedef TComInterface<_ProtocolLib, &IID__ProtocolLib> _ProtocolLibPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef _ProtocolLib ProtocolLib;
typedef _ProtocolLibPtr ProtocolLibPtr;

#define LIBID_OF_ProtocolLib (&LIBID_ProtocolClassLibrary)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
enum class ProtocolKind
{
  ProtocolKind_NULL = 0, 
  ProtocolKind_Socket = 1, 
  ProtocolKind_UDP = 2, 
  ProtocolKind_TCP = 3
};

// *********************************************************************//
// Interface: IProtocolLib
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9AE22444-7188-45D0-B1F2-C05F4AEA80FC}
// *********************************************************************//
interface IProtocolLib  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE ConnectLib(Protocolclasslibrary_tlb::ProtocolKind protocol/*[in]*/, 
                                               BSTR host/*[in]*/, long port/*[in]*/, 
                                               VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DisconnectLib(VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SendBufLib(BSTR buf/*[in]*/, BSTR* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetInfoLib(BSTR* pRetVal/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall ConnectLib(Protocolclasslibrary_tlb::ProtocolKind protocol/*[in]*/, 
                                     BSTR host/*[in]*/, long port/*[in]*/)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->ConnectLib(protocol, host, port, (VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }

  VARIANT_BOOL __fastcall DisconnectLib(void)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->DisconnectLib((VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }

  BSTR __fastcall SendBufLib(BSTR buf/*[in]*/)
  {
    BSTR pRetVal = 0;
    OLECHECK(this->SendBufLib(buf, (BSTR*)&pRetVal));
    return pRetVal;
  }

  BSTR __fastcall GetInfoLib(void)
  {
    BSTR pRetVal = 0;
    OLECHECK(this->GetInfoLib((BSTR*)&pRetVal));
    return pRetVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ProtocolLib
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B01D07AE-4CF9-35C9-B772-E46F994EB6AE}
// *********************************************************************//
interface _ProtocolLib  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<IProtocolLib>  TCOMIProtocolLib;

// *********************************************************************//
// DispIntf:  IProtocolLib
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9AE22444-7188-45D0-B1F2-C05F4AEA80FC}
// *********************************************************************//
template<class T>
class IProtocolLibDispT : public TAutoDriver<IProtocolLib>
{
public:
  IProtocolLibDispT(){}

  IProtocolLibDispT(IProtocolLib *pintf)
  {
    TAutoDriver<IProtocolLib>::Bind(pintf, false);
  }

  IProtocolLibDispT(IProtocolLibPtr pintf)
  {
    TAutoDriver<IProtocolLib>::Bind(pintf, true);
  }

  IProtocolLibDispT& operator=(IProtocolLib *pintf)
  {
    TAutoDriver<IProtocolLib>::Bind(pintf, false);
    return *this;
  }

  IProtocolLibDispT& operator=(IProtocolLibPtr pintf)
  {
    TAutoDriver<IProtocolLib>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall ConnectLib(Protocolclasslibrary_tlb::ProtocolKind protocol/*[in]*/, 
                                        BSTR host/*[in]*/, long port/*[in]*/, 
                                        VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall ConnectLib(Protocolclasslibrary_tlb::ProtocolKind protocol/*[in]*/, 
                                        BSTR host/*[in]*/, long port/*[in]*/);
  HRESULT         __fastcall DisconnectLib(VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall DisconnectLib(void);
  HRESULT         __fastcall SendBufLib(BSTR buf/*[in]*/, BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall SendBufLib(BSTR buf/*[in]*/);
  HRESULT         __fastcall GetInfoLib(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall GetInfoLib(void);

};
typedef IProtocolLibDispT<IProtocolLib> IProtocolLibDisp;

// *********************************************************************//
// SmartIntf: TCOM_ProtocolLib
// Interface: _ProtocolLib
// *********************************************************************//
template <class T /* _ProtocolLib */ >
class TCOM_ProtocolLibT : public TComInterface<_ProtocolLib>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ProtocolLibT() {}
  TCOM_ProtocolLibT(_ProtocolLib *intf, bool addRef = false) : TComInterface<_ProtocolLib>(intf, addRef) {}
  TCOM_ProtocolLibT(const TCOM_ProtocolLibT& src) : TComInterface<_ProtocolLib>(src) {}
  TCOM_ProtocolLibT& operator=(const TCOM_ProtocolLibT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ProtocolLibT<_ProtocolLib> TCOM_ProtocolLib;

// *********************************************************************//
// DispIntf:  _ProtocolLib
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B01D07AE-4CF9-35C9-B772-E46F994EB6AE}
// *********************************************************************//
template<class T>
class _ProtocolLibDispT : public TAutoDriver<_ProtocolLib>
{
public:
  _ProtocolLibDispT(){}

  _ProtocolLibDispT(_ProtocolLib *pintf)
  {
    TAutoDriver<_ProtocolLib>::Bind(pintf, false);
  }

  _ProtocolLibDispT(_ProtocolLibPtr pintf)
  {
    TAutoDriver<_ProtocolLib>::Bind(pintf, true);
  }

  _ProtocolLibDispT& operator=(_ProtocolLib *pintf)
  {
    TAutoDriver<_ProtocolLib>::Bind(pintf, false);
    return *this;
  }

  _ProtocolLibDispT& operator=(_ProtocolLibPtr pintf)
  {
    TAutoDriver<_ProtocolLib>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ProtocolLib));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ProtocolLib);
  }


};
typedef _ProtocolLibDispT<_ProtocolLib> _ProtocolLibDisp;

// *********************************************************************//
// DispIntf:  IProtocolLib
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9AE22444-7188-45D0-B1F2-C05F4AEA80FC}
// *********************************************************************//
template <class T> HRESULT __fastcall
IProtocolLibDispT<T>::ConnectLib(Protocolclasslibrary_tlb::ProtocolKind protocol/*[in]*/, 
                                 BSTR host/*[in]*/, long port/*[in]*/, 
                                 VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectLib"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<3> _args;
  _args[1] = (int)protocol /*[VT_USERDEFINED:0]*/;
  _args[2] = host /*[VT_BSTR:0]*/;
  _args[3] = port /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IProtocolLibDispT<T>::ConnectLib(Protocolclasslibrary_tlb::ProtocolKind protocol/*[in]*/, 
                                 BSTR host/*[in]*/, long port/*[in]*/)
{
  VARIANT_BOOL pRetVal;
  this->ConnectLib(protocol, host, port, (VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IProtocolLibDispT<T>::DisconnectLib(VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectLib"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IProtocolLibDispT<T>::DisconnectLib(void)
{
  VARIANT_BOOL pRetVal;
  this->DisconnectLib((VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IProtocolLibDispT<T>::SendBufLib(BSTR buf/*[in]*/, BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendBufLib"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = buf /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IProtocolLibDispT<T>::SendBufLib(BSTR buf/*[in]*/)
{
  BSTR pRetVal;
  this->SendBufLib(buf, (BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IProtocolLibDispT<T>::GetInfoLib(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetInfoLib"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IProtocolLibDispT<T>::GetInfoLib(void)
{
  BSTR pRetVal;
  this->GetInfoLib((BSTR*)&pRetVal);
  return pRetVal;
}

// *********************************************************************//
// SmartIntf: TCOM_ProtocolLib
// Interface: _ProtocolLib
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ProtocolLib
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B01D07AE-4CF9-35C9-B772-E46F994EB6AE}
// *********************************************************************//
// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ProtocolLib
// Interface: TCOM_ProtocolLib
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ProtocolLib, _ProtocolLib, &CLSID_ProtocolLib, &IID__ProtocolLib> CoProtocolLib;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Protocolclasslibrary_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Protocolclasslibrary_tlb;
#endif

#pragma option pop

#endif // ProtocolClassLibrary_TLBH
