// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 87174 $
// File generated on 2021-09-16 오전 10:19:40 from Type Library described below.

// ************************************************************************  //
// Type Lib: D:\WorkSpace\Test\ClientDLL\ClientLib\ClientLib\bin\Debug\ClientLib.tlb (1)
// LIBID: {0B6252A6-5770-4259-8519-43AE6B162EEE}
// LCID: 0
// Helpfile: 
// HelpString: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
//   (2) v2.4 mscorlib, (C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
#ifndef   ClientLib_TLBH
#define   ClientLib_TLBH

#pragma option push -b -a4 -w-inl -w-8118

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif
#include "mscorlib_TLB.h"

#include <System.Win.StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace Clientlib_tlb
{

// *********************************************************************//
// HelpString: 
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_ClientLib;
extern __declspec (package) const GUID GUID_ProtocolKind;
extern __declspec (package) const GUID IID_IClientProtocolLib;
extern __declspec (package) const GUID IID__ClientProtocolLib;
extern __declspec (package) const GUID CLSID_ClientProtocolLib;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum class    ProtocolKind;
interface DECLSPEC_UUID("{32565504-2D50-4B35-AD1C-69882186EC34}") IClientProtocolLib;
typedef TComInterface<IClientProtocolLib, &IID_IClientProtocolLib> IClientProtocolLibPtr;

interface DECLSPEC_UUID("{E04B71E9-FE1C-3B57-8326-FF10B2803BD3}") _ClientProtocolLib;
typedef TComInterface<_ClientProtocolLib, &IID__ClientProtocolLib> _ClientProtocolLibPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef _ClientProtocolLib ClientProtocolLib;
typedef _ClientProtocolLibPtr ClientProtocolLibPtr;

#define LIBID_OF_ClientProtocolLib (&LIBID_ClientLib)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
enum class ProtocolKind
{
  ProtocolKind_NULL = 0, 
  ProtocolKind_Socket = 1, 
  ProtocolKind_UDP = 2, 
  ProtocolKind_TCP = 3
};

// *********************************************************************//
// Interface: IClientProtocolLib
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {32565504-2D50-4B35-AD1C-69882186EC34}
// *********************************************************************//
interface IClientProtocolLib  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Connect(Clientlib_tlb::ProtocolKind kind/*[in]*/, 
                                            BSTR ipAddr/*[in]*/, long portNum/*[in]*/, 
                                            VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DisConnect(VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE IsConnected(VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SendMsg(BSTR data/*[in]*/, VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ReceiveMsg(BSTR* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetErrorMsg(BSTR* pRetVal/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall Connect(Clientlib_tlb::ProtocolKind kind/*[in]*/, BSTR ipAddr/*[in]*/, 
                                  long portNum/*[in]*/)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->Connect(kind, ipAddr, portNum, (VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }

  VARIANT_BOOL __fastcall DisConnect(void)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->DisConnect((VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }

  VARIANT_BOOL __fastcall IsConnected(void)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->IsConnected((VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }

  VARIANT_BOOL __fastcall SendMsg(BSTR data/*[in]*/)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->SendMsg(data, (VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }

  BSTR __fastcall ReceiveMsg(void)
  {
    BSTR pRetVal = 0;
    OLECHECK(this->ReceiveMsg((BSTR*)&pRetVal));
    return pRetVal;
  }

  BSTR __fastcall GetErrorMsg(void)
  {
    BSTR pRetVal = 0;
    OLECHECK(this->GetErrorMsg((BSTR*)&pRetVal));
    return pRetVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ClientProtocolLib
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E04B71E9-FE1C-3B57-8326-FF10B2803BD3}
// *********************************************************************//
interface _ClientProtocolLib  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<IClientProtocolLib>  TCOMIClientProtocolLib;

// *********************************************************************//
// DispIntf:  IClientProtocolLib
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {32565504-2D50-4B35-AD1C-69882186EC34}
// *********************************************************************//
template<class T>
class IClientProtocolLibDispT : public TAutoDriver<IClientProtocolLib>
{
public:
  IClientProtocolLibDispT(){}

  IClientProtocolLibDispT(IClientProtocolLib *pintf)
  {
    TAutoDriver<IClientProtocolLib>::Bind(pintf, false);
  }

  IClientProtocolLibDispT(IClientProtocolLibPtr pintf)
  {
    TAutoDriver<IClientProtocolLib>::Bind(pintf, true);
  }

  IClientProtocolLibDispT& operator=(IClientProtocolLib *pintf)
  {
    TAutoDriver<IClientProtocolLib>::Bind(pintf, false);
    return *this;
  }

  IClientProtocolLibDispT& operator=(IClientProtocolLibPtr pintf)
  {
    TAutoDriver<IClientProtocolLib>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall Connect(Clientlib_tlb::ProtocolKind kind/*[in]*/, BSTR ipAddr/*[in]*/, 
                                     long portNum/*[in]*/, VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Connect(Clientlib_tlb::ProtocolKind kind/*[in]*/, BSTR ipAddr/*[in]*/, 
                                     long portNum/*[in]*/);
  HRESULT         __fastcall DisConnect(VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall DisConnect(void);
  HRESULT         __fastcall IsConnected(VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsConnected(void);
  HRESULT         __fastcall SendMsg(BSTR data/*[in]*/, VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall SendMsg(BSTR data/*[in]*/);
  HRESULT         __fastcall ReceiveMsg(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall ReceiveMsg(void);
  HRESULT         __fastcall GetErrorMsg(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall GetErrorMsg(void);

};
typedef IClientProtocolLibDispT<IClientProtocolLib> IClientProtocolLibDisp;

// *********************************************************************//
// SmartIntf: TCOM_ClientProtocolLib
// Interface: _ClientProtocolLib
// *********************************************************************//
template <class T /* _ClientProtocolLib */ >
class TCOM_ClientProtocolLibT : public TComInterface<_ClientProtocolLib>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ClientProtocolLibT() {}
  TCOM_ClientProtocolLibT(_ClientProtocolLib *intf, bool addRef = false) : TComInterface<_ClientProtocolLib>(intf, addRef) {}
  TCOM_ClientProtocolLibT(const TCOM_ClientProtocolLibT& src) : TComInterface<_ClientProtocolLib>(src) {}
  TCOM_ClientProtocolLibT& operator=(const TCOM_ClientProtocolLibT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ClientProtocolLibT<_ClientProtocolLib> TCOM_ClientProtocolLib;

// *********************************************************************//
// DispIntf:  _ClientProtocolLib
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E04B71E9-FE1C-3B57-8326-FF10B2803BD3}
// *********************************************************************//
template<class T>
class _ClientProtocolLibDispT : public TAutoDriver<_ClientProtocolLib>
{
public:
  _ClientProtocolLibDispT(){}

  _ClientProtocolLibDispT(_ClientProtocolLib *pintf)
  {
    TAutoDriver<_ClientProtocolLib>::Bind(pintf, false);
  }

  _ClientProtocolLibDispT(_ClientProtocolLibPtr pintf)
  {
    TAutoDriver<_ClientProtocolLib>::Bind(pintf, true);
  }

  _ClientProtocolLibDispT& operator=(_ClientProtocolLib *pintf)
  {
    TAutoDriver<_ClientProtocolLib>::Bind(pintf, false);
    return *this;
  }

  _ClientProtocolLibDispT& operator=(_ClientProtocolLibPtr pintf)
  {
    TAutoDriver<_ClientProtocolLib>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ClientProtocolLib));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ClientProtocolLib);
  }


};
typedef _ClientProtocolLibDispT<_ClientProtocolLib> _ClientProtocolLibDisp;

// *********************************************************************//
// DispIntf:  IClientProtocolLib
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {32565504-2D50-4B35-AD1C-69882186EC34}
// *********************************************************************//
template <class T> HRESULT __fastcall
IClientProtocolLibDispT<T>::Connect(Clientlib_tlb::ProtocolKind kind/*[in]*/, BSTR ipAddr/*[in]*/, 
                                    long portNum/*[in]*/, VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<3> _args;
  _args[1] = (int)kind /*[VT_USERDEFINED:0]*/;
  _args[2] = ipAddr /*[VT_BSTR:0]*/;
  _args[3] = portNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IClientProtocolLibDispT<T>::Connect(Clientlib_tlb::ProtocolKind kind/*[in]*/, BSTR ipAddr/*[in]*/, 
                                    long portNum/*[in]*/)
{
  VARIANT_BOOL pRetVal;
  this->Connect(kind, ipAddr, portNum, (VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IClientProtocolLibDispT<T>::DisConnect(VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisConnect"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IClientProtocolLibDispT<T>::DisConnect(void)
{
  VARIANT_BOOL pRetVal;
  this->DisConnect((VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IClientProtocolLibDispT<T>::IsConnected(VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsConnected"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IClientProtocolLibDispT<T>::IsConnected(void)
{
  VARIANT_BOOL pRetVal;
  this->IsConnected((VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IClientProtocolLibDispT<T>::SendMsg(BSTR data/*[in]*/, VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendMsg"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IClientProtocolLibDispT<T>::SendMsg(BSTR data/*[in]*/)
{
  VARIANT_BOOL pRetVal;
  this->SendMsg(data, (VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IClientProtocolLibDispT<T>::ReceiveMsg(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReceiveMsg"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IClientProtocolLibDispT<T>::ReceiveMsg(void)
{
  BSTR pRetVal;
  this->ReceiveMsg((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IClientProtocolLibDispT<T>::GetErrorMsg(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetErrorMsg"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IClientProtocolLibDispT<T>::GetErrorMsg(void)
{
  BSTR pRetVal;
  this->GetErrorMsg((BSTR*)&pRetVal);
  return pRetVal;
}

// *********************************************************************//
// SmartIntf: TCOM_ClientProtocolLib
// Interface: _ClientProtocolLib
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ClientProtocolLib
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E04B71E9-FE1C-3B57-8326-FF10B2803BD3}
// *********************************************************************//
// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ClientProtocolLib
// Interface: TCOM_ClientProtocolLib
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ClientProtocolLib, _ClientProtocolLib, &CLSID_ClientProtocolLib, &IID__ClientProtocolLib> CoClientProtocolLib;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Clientlib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Clientlib_tlb;
#endif

#pragma option pop

#endif // ClientLib_TLBH
